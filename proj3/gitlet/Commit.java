package gitlet;

import java.io.File;
import java.io.Serializable;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

/** Commit class.
 * Store each commit's information.
 * @author Jilin He. */
public class Commit implements Serializable {

    /** Save message of a commit. */
    private String _message;
    /** Save timestamp of a commit. */
    private String _timestamp;
    /** Save parents of a commit, this is an array
     * for there may exists two parents because of merging operation. */
    private Commit[] _parent;
    /** Save commitid of a commit, generated by Utils.sha_1(). */
    private String _commitid;
    /** Save branch of a commit. */
    private String _branch;
    /** Save content of a commit, also used to encrypt. */
    private String _content;
    /** Save blobs of a commit, another data structure that
     * stores the information of each file. */
    private String[] _blobs;

    /** Default constructor. */
    public Commit() {
        _message = null;
        _timestamp = null;
        _parent = null;
        _commitid = null;
        _branch = null;
        _content = null;
    }

    /** Main constructor contains the inputs of commit.
     * @param message is the message with commit.
     * @param parent is the last commit, may exist two.
     * @param content contains file's name, path and id.
     * @param branch is the branch of this commit. */
    public Commit(String message, Commit[] parent,
                  String content, String branch) {
        this._message = message;
        this._parent = parent;
        this._content = content;
        if (parent == null) {
            this._timestamp = "Wed Dec 31 16:00:00 1969 -0800";
            this._commitid = Utils.sha1(this._timestamp);
            this._branch = branch;
        } else {
            ZonedDateTime now = ZonedDateTime.now();
            this._timestamp =
                    now.format(DateTimeFormatter.
                            ofPattern("MMM EE dd HH:MM:SS YYYY xx"));
            this._commitid = Utils.sha1(content + this._timestamp);
            this._branch = branch;
        }
    }

    /** fromfile function is to get all the files in the current branch,
     * when branch equals null, means to get all the files in this repository.
     * @param branch is the current branch.
     * @return ArrayList of Commits. */
    public static ArrayList<Commit> fromfile(String branch) {
        File workingDir = new File(Commands.getCommitState().getPath());
        File[] tempList = workingDir.listFiles();
        ArrayList<Commit> outcome = new ArrayList<Commit>();

        if (branch == null) {
            if (tempList != null) {
                for (File temp: tempList) {
                    if (temp.isFile()) {
                        Commit parent = Utils.readObject(temp, Commit.class);
                        outcome.add(parent);
                    }
                }
                return outcome;
            }
        } else {
            File branchname = Utils.join(Commands.getBranches(), branch);
            String path = Utils.readContentsAsString(branchname);
            if (tempList != null) {
                Commit parent = new Commit();
                for (File temp: tempList) {
                    if (temp.getPath().equals(path)) {
                        parent = Utils.readObject(temp, Commit.class);
                        if (parent.getMessage().equals("initial commit")) {
                            outcome.add(parent);
                            return outcome;
                        }
                        outcome.add(parent);
                        break;
                    }
                }
                while (!parent.getMessage().equals("initial commit")) {
                    Commit[] parents = parent.getParent();
                    parent = parents[0];
                    outcome.add(parent);
                }
                return outcome;
            }
        }
        return null;
    }

    /** saveCommit function is to save the current commit into repository.
     * @param commBlob are the files this commit linked to.
     * @return filepath where stores this commit. */
    public String saveCommit(String[] commBlob) {
        this.setBlobs(_blobs);
        File workingDir = new File(Commands.getCommitState().getPath());
        File[] tempList = workingDir.listFiles();
        int len = 0;
        if (tempList != null) {
            for (File temp1: tempList) {
                len += temp1.isFile() ? 0 : 1;
            }
        }
        File temp = Utils.join(Commands.getCommitState(), len + ".txt");
        Utils.writeObject(temp, this);

        return temp.getPath();
    }

    /** Get timestamp of this commit.
     * @return timestamp. */
    public String getTimestamp() {
        return _timestamp;
    }

    /** Set timestamp for this commit.
     * @param timestamp is the input. */
    public void setTimestamp(String timestamp) {
        this._timestamp = timestamp;
    }

    /** Get parents of this commit.
     * @return parent with an array. */
    public Commit[] getParent() {
        return _parent;
    }

    /** Set parents for this commit.
     * @param parent is the input. */
    public void setParent(Commit[] parent) {
        this._parent = parent;
    }

    /** Get message of this commit.
     * @return message. */
    public String getMessage() {
        return _message;
    }

    /** Set message for this commit.
     * @param message is input. */
    public void setMessage(String message) {
        this._message = message;
    }

    /** Get commit id of this commit.
     * @return commit id. */
    public String getCommitId() {
        return _commitid;
    }

    /** Set id for this commit.
     * @param commitid is input. */
    public void setCommitid(String commitid) {
        this._commitid = commitid;
    }

    /** Get branch of this commit.
     * @return current branch. */
    public String getBranch() {
        return _branch;
    }

    /** Set branch for this commit.
     * @param branch is input. */
    public void setBranch(String branch) {
        this._branch = branch;
    }

    /** Get blobs of this commit.
     * @return blobs with an array. */
    public String[] getBlobs() {
        return _blobs;
    }

    /** Set blobs for this commit.
     * @param blobs is input. */
    public void setBlobs(String[] blobs) {
        this._blobs = blobs;
    }
}
